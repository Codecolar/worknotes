python中的标识符是区分大小写的。
以下划线开头的标识符是有特殊意义的。以单下划线开头（_foo）的代表不能直接访问的类属性
以双下划线开头的（__foo）代表类的私有成员；以双下划线开头和结尾的（__foo__）代表python
里特殊方法专用的标识，如__init__（）代表类的构造函数。

Python的代码块不使用大括号（{}）来控制类，函数以及其他逻辑判断。python最具特色的就是用
缩进来写模块。缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这
个必须严格执行。
Python可以在同一行中使用多条语句，语句之间使用分号(;)分割

Python语句中一般以新行作为为语句的结束符。但是我们可以使用斜杠（ \）将一行的语句分为多行显示。
语句中包含[], {} 或 () 括号就不需要使用多行连接符。

Python 可以使用引号( ' )、双引号( " )、三引号( ''' 或 """ ) 来表示字符串，引号的开始与结束必须的相同类型的。
其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。

python中单行注释采用 # 开头。
多行注释使用三个单引号(''')或三个双引号(""")。

函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，
以突出函数入口的开始。空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，
Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的
维护或重构。记住：空行也是程序代码的一部分。

常用函数：
id(), isinstance(), issubclass(), del()删除引用,  len(), cmp(), max(), min(), range(), 
dir() will give you the list of in scope variables:
dir() 函数一个排好序的字符串列表, 列表容纳了在一个模块里定义的所有模块，变量和函数.
globals() will give you a dictionary of global variables
locals() will give you a dictionary of local variables

Primitive data types:
Numbers, String, List, Tuple, Dictionary

Numbers: immutable, when reassigned, reallocated.
Types: int, long, float, complex
functions: math, random, constants

String: immutable
python的字串列表有2种取值顺序
从左到右索引默认0开始的, 从右到左索引默认-1开始的，最大范围是字符串开头
截取子段：[头下标:尾下标]
加号（+）是字符串连接运算符，星号（*）是重复操作
在需要在字符中使用特殊字符时，python用反斜杠(\)转义字符
r/R	原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能
打印的字符。 r'\n' or R'\n'
%	格式字符串。支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法
是将一个值插入到一个有字符串格式符 %s 的字符串中。在 Python 中，字符串格式化使用与 C 中 
sprintf 函数一样的语法。
print "My name is %s and weight is %d kg!" % ('Zara', 21) 
Python三引号（triple quotes）
python中三引号可以将复杂的字符串进行复制:
python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。
三引号的语法是一对连续的单引号或者双引号（通常都是成对的用）。
让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（
所见即所得）格式的。
Unicode 字符串: u'Hello World !'
string 函数：string.length()...

List:
用[ ]标识。是python最通用的复合数据类型
值得分割也可以用到变量[头下标:尾下标]
从左到右索引默认0开始的，从右到左索引默认-1开始，下标可以为空表示取到头或尾。
加号（+）是列表连接运算符，星号（*）是重复操作

Tuple:
元组是另一个数据类型，类似于List（列表）。
元组用"()"标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。
元组中只包含一个元素时，需要在元素后面添加逗号
无关闭分隔符
任意无符号的对象，以逗号隔开，默认为元组

Dictionary:
字典是无序的对象集合. 通过键来存取的，而不是通过偏移存取。

Data types casting:
int(), long(), str(), list(), dict()等函数

Python operators:
Common operators plus member operator: in / not in
identity operator: is / is not, determined by id(var) output

functions: 
parameters: immutable: 值传递 mutable: 引用传递
调用函数时可使用的正式参数类型：
必备参数：正确的顺序传入函数。调用时的数量必须和声明时的一样
关键字参数：顺序可变
def printme( str ):
printme( str = "My string");
默认参数：
def printinfo( name, age = 35 ):
不定长参数：
def functionname([formal_args,] *var_args_tuple ):
	print arg1
   for var in vartuple:
      print var
   return;
printinfo( 70, 60, 50 );

匿名函数
python 使用 lambda 来创建匿名函数。
lambda只是一个表达式。
lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。
lambda [arg1 [,arg2,.....argn]]:expression
sum = lambda arg1, arg2: arg1 + arg2;
print "相加后的值为 : ", sum( 10, 20 )

变量作用域
一个程序的所有的变量的访问权限决定于这个变量是在哪里赋值的。
变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量名称。两种最基本的变量作用域如下：
全局变量
局部变量
函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域
调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。

Python 模块
Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。
模块让你能够有逻辑地组织你的 Python 代码段。
模块能定义函数，类和变量，模块里也能包含可执行的代码。
模块的引入
模块定义好后，我们可以使用 import 语句来引入模块，语法如下：
import module1[, module2[,... moduleN]
在调用模块中的函数时，必须这样引用：
模块名.函数名
个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。
Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：
from modname import name1[, name2[, ... nameN]]
模块搜索路径存储在 system 模块的 sys.path 变量中
特殊字符串变量__name__指向模块的名字，__file__指向该模块的导入文件名。

命名空间和作用域
变量是拥有匹配对象的标识符，命名空间是一个包含了变量名称们（键）和它们各自相应的对象们
（值）的字典。
每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。
Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。
因此，如果要给全局变量在一个函数里赋值，必须使用 global 语句。

reload() 函数
当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。
因此，如果你想重新执行模块里顶层部分的代码，可以用 reload() 函数。该函数会重新导入之前
导入过的模块。

Python中的包
包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 
的应用环境。
简单来说，包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。
__int__.py用于标识当前文件夹是一个包。

Python 面向对象
类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。 // class.var
类变量通常不作为实例变量使用。
数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。  //    ???
方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override）
实例变量：定义在方法中的变量，只作用于类的当前实例。     // self.var
方法内的局部变量会屏蔽掉类变量和实例变量。类变量是所有实例共享的，而实例变量只属于对象自己，
每个实例的实例变量可以有不同的值
对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。
class ClassName:
   '类的帮助信息'   #类文档字符串
   class_suite  #类体
类的帮助信息可以通过ClassName.__doc__查看。
类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self

创建实例对象
实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。
emp1 = Employee("Zara", 2000)
你也可以使用以下函数的方式来访问属性：
hasattr(emp1, 'age')    # 如果存在 'age' 属性返回 True。
getattr(emp1, 'age')    # 返回 'age' 属性的值
setattr(emp1, 'age', 8) # 添加属性 'age' 值为 8
delattr(empl, 'age')    # 删除属性 'age'
内置类属性:
__dict__ : 类的属性（包含一个字典，由类的数据属性组成）
__doc__ :类的文档字符串
__name__: 类名
__module__: 类定义所在的模块
__bases__ : 类的所有父类构成元素

python对象销毁(垃圾回收)
Python 使用了引用计数这一简单技术来跟踪和回收垃圾。
垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况

类的继承:
python中继承中的一些特点：
1：在继承中基类的构造（__init__()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。
2：在调用基类的方法时(类定义体中)，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类
   中调用普通函数时并不需要带上self参数
3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐
   个查找。（先在本类中查找调用的方法，找不到才去基类中找）。
如果在继承元组中列了一个以上的类，那么它就被称作"多重继承" 。
class SubClassName (ParentClass1[, ParentClass2, ...]):
   'Optional class documentation string'
   class_suite

基础重载方法
__init__, __del__, __repr__, __str__, __cmp__, 
运算符重载：__add__, ...

类属性与方法:
类的私有属性
__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。
类内部的方法中使用时 self.__private_attrs。
类的私有方法
__private_method：两个下划线开头，声明该方法为私有方法，不能在类地外部调用。
在类的内部调用 self.__private_methods
Python不允许实例化的类访问私有数据，但你可以使用 object._className__attrName 访问属性

python visualenv usage:
install: pip install virtualenv
mkdir Environments && cd Environments
virtualenv project1_env
switch into project1_env environment: source project1_env/bin/activate
test: which python; which pip; pip list; pip install ...
export certain python environments to use in another project: pip freeze --local > requirements.txt
cat requirements.txt to see
use requirements.txt in another virtual env: pip install -r requirements.txt
get out the current virtual environment to return to the global python environment:
$ deactivate 
test: whcih python
remove the project1 virtual environment: rm -rf project1_env/
